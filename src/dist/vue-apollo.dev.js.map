{"version":3,"sources":["vue-apollo.js"],"names":["Vue","use","VueApollo","AUTH_TOKEN","httpEndpoint","process","env","VUE_APP_GRAPHQL_HTTP","defaultOptions","wsEndpoint","tokenName","persisting","websocketsOnly","ssr","createProvider","options","apolloClient","wsClient","apolloProvider","defaultClient","$query","errorHandler","error","console","log","message","onLogin","token","localStorage","setItem","resetStore","onLogout","removeItem"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAGAA,gBAAIC,GAAJ,CAAQC,qBAAR,E,CAEA;;;AACA,IAAMC,UAAU,GAAG,cAAnB,C,CAEA;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IAAoC,4CAAzD,C,CAEA;;AACA,IAAMC,cAAc,GAAG;AACrB;AACAJ,EAAAA,YAAY,EAAZA,YAFqB;AAGrB;AACA;AACA;AACAK,EAAAA,UAAU,EAAE,IANS;AAOrB;AACAC,EAAAA,SAAS,EAAEP,UARU;AASrB;AACAQ,EAAAA,UAAU,EAAE,KAVS;AAWrB;AACA;AACAC,EAAAA,cAAc,EAAE,KAbK;AAcrB;AACAC,EAAAA,GAAG,EAAE,KAfgB,CAiBrB;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAhCqB,CAAvB,C,CAmCA;;AACO,SAASC,cAAT,GAAuC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAC5C;AAD4C,4BAET,yDAC9BP,cAD8B,MAE9BO,OAF8B,EAFS;AAAA,MAEpCC,YAFoC,uBAEpCA,YAFoC;AAAA,MAEtBC,QAFsB,uBAEtBA,QAFsB;;AAM5CD,EAAAA,YAAY,CAACC,QAAb,GAAwBA,QAAxB,CAN4C,CAQ5C;;AACA,MAAMC,cAAc,GAAG,IAAIhB,qBAAJ,CAAc;AACnCiB,IAAAA,aAAa,EAAEH,YADoB;AAEnCR,IAAAA,cAAc,EAAE;AACdY,MAAAA,MAAM,EAAE,CACN;AADM;AADM,KAFmB;AAOnCC,IAAAA,YAPmC,wBAOrBC,KAPqB,EAOd;AACnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,yFAAvB,EAAkHF,KAAK,CAACG,OAAxH;AACD;AAVkC,GAAd,CAAvB;AAaA,SAAOP,cAAP;AACD,C,CAED;;;AACO,SAAeQ,OAAf,CAAwBV,YAAxB,EAAsCW,KAAtC;AAAA;AAAA;AAAA;AAAA;AACL,cAAI,OAAOC,YAAP,KAAwB,WAAxB,IAAuCD,KAA3C,EAAkD;AAChDC,YAAAA,YAAY,CAACC,OAAb,CAAqB1B,UAArB,EAAiCwB,KAAjC;AACD;;AACD,cAAIX,YAAY,CAACC,QAAjB,EAA2B,sCAAkBD,YAAY,CAACC,QAA/B;AAJtB;AAAA;AAAA,0CAMGD,YAAY,CAACc,UAAb,EANH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQH;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8C,gBAA9C,EAAgE,YAAEC,OAAlE;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAaP;;;AACO,SAAeM,QAAf,CAAyBf,YAAzB;AAAA;AAAA;AAAA;AAAA;AACL,cAAI,OAAOY,YAAP,KAAwB,WAA5B,EAAyC;AACvCA,YAAAA,YAAY,CAACI,UAAb,CAAwB7B,UAAxB;AACD;;AACD,cAAIa,YAAY,CAACC,QAAjB,EAA2B,sCAAkBD,YAAY,CAACC,QAA/B;AAJtB;AAAA;AAAA,0CAMGD,YAAY,CAACc,UAAb,EANH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQH;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+C,gBAA/C,EAAiE,aAAEC,OAAnE;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import Vue from 'vue'\nimport VueApollo from 'vue-apollo'\nimport { createApolloClient, restartWebsockets } from 'vue-cli-plugin-apollo/graphql-client'\n\n// Install the vue plugin\nVue.use(VueApollo)\n\n// Name of the localStorage item\nconst AUTH_TOKEN = 'apollo-token'\n\n// Http endpoint\nconst httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'https://simplisaleshw.cotunnel.com/graphql'\n\n// Config\nconst defaultOptions = {\n  // You can use `https` for secure connection (recommended in production)\n  httpEndpoint,\n  // You can use `wss` for secure connection (recommended in production)\n  // Use `null` to disable subscriptions\n  // wsEndpoint: process.env.VUE_APP_GRAPHQL_WS || 'ws://localhost:4000/graphql',\n  wsEndpoint: null,\n  // LocalStorage token\n  tokenName: AUTH_TOKEN,\n  // Enable Automatic Query persisting with Apollo Engine\n  persisting: false,\n  // Use websockets for everything (no HTTP)\n  // You need to pass a `wsEndpoint` for this to work\n  websocketsOnly: false,\n  // Is being rendered on the server?\n  ssr: false,\n\n  // Override default apollo link\n  // note: don't override httpLink here, specify httpLink options in the\n  // httpLinkOptions property of defaultOptions.\n  // link: myLink\n\n  // Override default cache\n  // cache: myCache\n\n  // Override the way the Authorization header is set\n  // getAuth: (tokenName) => ...\n\n  // Additional ApolloClient options\n  // apollo: { ... }\n\n  // Client local data (see apollo-link-state)\n  // clientState: { resolvers: { ... }, defaults: { ... } }\n}\n\n// Call this in the Vue app file\nexport function createProvider (options = {}) {\n  // Create apollo client\n  const { apolloClient, wsClient } = createApolloClient({\n    ...defaultOptions,\n    ...options,\n  })\n  apolloClient.wsClient = wsClient\n\n  // Create vue apollo provider\n  const apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n    defaultOptions: {\n      $query: {\n        // fetchPolicy: 'cache-and-network',\n      },\n    },\n    errorHandler (error) {\n      // eslint-disable-next-line no-console\n      console.log('%cError', 'background: red; color: white; padding: 2px 4px; border-radius: 3px; font-weight: bold;', error.message)\n    },\n  })\n\n  return apolloProvider\n}\n\n// Manually call this when user log in\nexport async function onLogin (apolloClient, token) {\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem(AUTH_TOKEN, token)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (login)', 'color: orange;', e.message)\n  }\n}\n\n// Manually call this when user log out\nexport async function onLogout (apolloClient) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage.removeItem(AUTH_TOKEN)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (logout)', 'color: orange;', e.message)\n  }\n}\n"],"file":"vue-apollo.dev.js"}