{"version":3,"sources":["vue-apollo.js"],"names":["_vue","_interopRequireDefault","require","_vueApollo","_graphqlClient","Vue","use","VueApollo","AUTH_TOKEN","httpEndpoint","process","env","VUE_APP_GRAPHQL_HTTP","defaultOptions","wsEndpoint","tokenName","persisting","websocketsOnly","ssr","createProvider","options","arguments","length","undefined","_createApolloClient","createApolloClient","_objectSpread","apolloClient","wsClient","defaultClient","$query","errorHandler","error","log","message","onLogin","token","localStorage","console","setItem","restartWebsockets","resetStore","_context","t0","regeneratorRuntime","async","_context2","prev","next","removeItem","awrap","stop"],"mappings":"4JAAA,IAAAA,KAAAC,uBAAAC,QAAA,QACAC,WAAAF,uBAAAC,QAAA,eACAE,eAAAF,QAAA,20BAGAG,KAAAA,QAAIC,IAAIC,WAAAA,SAGR,IAAMC,WAAa,eAPnBC,aAAAC,QAAAC,IAAAC,sBAAA,6CAaMC,eAAiB,CAErBJ,aAAAA,aAIAK,WAAY,KAEZC,UAAWP,WAEXQ,YAAY,EAGZC,gBAAgB,EAEhBC,KAAK,GAQL,SAAAC,iBAAA,IAAAC,EAAA,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,GAAAG,GAGA,EAAApB,eAAAqB,oBAAAC,cAAA,GAEAb,eAFA,GAGAO,IAHAO,EAHAH,EAGAG,aAAAC,EAHAJ,EAGAI,SAqBEf,OAfFc,EAAAC,SAAAA,EAauB,IAAIrB,WAAAA,QAAU,CAThCsB,cAASV,EAA8BN,eAAA,CAYxCiB,OAAQ,IAZgCC,aASP,SATOC,GAM5CL,QAAYM,IAACL,UAAWA,0FAExBI,EAAAE,YAQEH,SAPmCI,QAAAR,EAAAS,GAOnCL,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,MACE,oBAAAM,cAAAD,GACAE,aAAAC,QAAY/B,WAAW4B,GAT3BT,EAAAC,WAAA,EAAAxB,eAAAoC,mBAAAb,EAAAC,UAOEG,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MASJJ,EAAAc,cATIV,KAAAA,EAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAUGO,QAAeH,IAAf,iCAAA,iBAAAO,EAAAC,GAAAT,SAVHH,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAWF,SAAWM,SAAAA,GAAX,OAAAO,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,MACeT,oBAAbF,cACDA,aAAAY,WAAAzC,YACDmB,EAAIA,WAAaC,EAAAA,eAAAA,mBAAUD,EAAAC,UAH3BkB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MADKvB,EAAAc,cACL,KAAA,EAAAK,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAH,GAAAG,EAAA,MAAA,GADKR,QAAAL,IAAA,kCAAA,iBAAAa,EAAAH,GAAAT,SACL,KAAA,GAAA,IAAA,MAAA,OAAAY,EAAAK,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"vue-apollo.min.js","sourcesContent":["import Vue from 'vue'\nimport VueApollo from 'vue-apollo'\nimport { createApolloClient, restartWebsockets } from 'vue-cli-plugin-apollo/graphql-client'\n\n// Install the vue plugin\nVue.use(VueApollo)\n\n// Name of the localStorage item\nconst AUTH_TOKEN = 'apollo-token'\n\n// Http endpoint\nconst httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'https://simplisaleshw.cotunnel.com/graphql'\n\n// Config\nconst defaultOptions = {\n  // You can use `https` for secure connection (recommended in production)\n  httpEndpoint,\n  // You can use `wss` for secure connection (recommended in production)\n  // Use `null` to disable subscriptions\n  // wsEndpoint: process.env.VUE_APP_GRAPHQL_WS || 'ws://localhost:4000/graphql',\n  wsEndpoint: null,\n  // LocalStorage token\n  tokenName: AUTH_TOKEN,\n  // Enable Automatic Query persisting with Apollo Engine\n  persisting: false,\n  // Use websockets for everything (no HTTP)\n  // You need to pass a `wsEndpoint` for this to work\n  websocketsOnly: false,\n  // Is being rendered on the server?\n  ssr: false,\n\n  // Override default apollo link\n  // note: don't override httpLink here, specify httpLink options in the\n  // httpLinkOptions property of defaultOptions.\n  // link: myLink\n\n  // Override default cache\n  // cache: myCache\n\n  // Override the way the Authorization header is set\n  // getAuth: (tokenName) => ...\n\n  // Additional ApolloClient options\n  // apollo: { ... }\n\n  // Client local data (see apollo-link-state)\n  // clientState: { resolvers: { ... }, defaults: { ... } }\n}\n\n// Call this in the Vue app file\nexport function createProvider (options = {}) {\n  // Create apollo client\n  const { apolloClient, wsClient } = createApolloClient({\n    ...defaultOptions,\n    ...options,\n  })\n  apolloClient.wsClient = wsClient\n\n  // Create vue apollo provider\n  const apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n    defaultOptions: {\n      $query: {\n        // fetchPolicy: 'cache-and-network',\n      },\n    },\n    errorHandler (error) {\n      // eslint-disable-next-line no-console\n      console.log('%cError', 'background: red; color: white; padding: 2px 4px; border-radius: 3px; font-weight: bold;', error.message)\n    },\n  })\n\n  return apolloProvider\n}\n\n// Manually call this when user log in\nexport async function onLogin (apolloClient, token) {\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem(AUTH_TOKEN, token)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (login)', 'color: orange;', e.message)\n  }\n}\n\n// Manually call this when user log out\nexport async function onLogout (apolloClient) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage.removeItem(AUTH_TOKEN)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (logout)', 'color: orange;', e.message)\n  }\n}\n"]}